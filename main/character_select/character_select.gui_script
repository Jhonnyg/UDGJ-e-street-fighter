local C = require("main.constants")

local start_game = function(self)
	self.state = self.GAME
	msg.post("/main#script", C.game.start, self.players)
end

local function add_shake(time,x,y,speed)
	msg.post("@render:", "render_shake", {time=time, x=x, y=y, speed=speed} )
end

local function set_info_label(self, str)
	gui.set_text(self.nodes.join, str)
end

local new_player = function(self, ptype, id, input_type, input_id)
	print("New player " .. id .. " entered")
	print("  # Input type is " .. input_type)
	print("  # Input ID is " .. input_id)
	
	self.players[id] = { type = ptype, input_type = input_type, input_id = input_id }
	gui.animate(self.nodes["portrait_" .. C.id_to_name[id]], gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_LINEAR, C.select.fade_in_time / 2)
	add_shake(0.2,8,8,0.02)

	if #self.players > 1 then
		local only_keyboard = true
		local only_gamepads = true
		local both_keyboards = {}
		
		for k, v in pairs(self.players) do			
			if self.players[k].input_type ~= 0 then
				only_keyboard = false
			end
			if self.players[k].input_type ~= 1 then
				only_gamepads = false
				both_keyboards[self.players[k].input_id] = true
			end
		end

		if only_keyboard then
			set_info_label(self,"Press [right-shift] or [left-alt] to start the game")
		elseif only_gamepads then
			set_info_label(self,"Press [X] to start the game")
		else
			if both_keyboards[0] and both_keyboards[1] then
				set_info_label(self,"Press [right-shift], [left-alt] or [X] to start the game")
			else
				if both_keyboards[0] then
					set_info_label(self,"Press [left-alt] or [X] to start the game")
				else
					set_info_label(self,"Press [right-shift] or [X] to start the game")
				end
			end
		end
	end
end

local function init_gui(self)
	gui.set_color(self.nodes.street, vmath.vector4(0, 0, 0, 0))
	gui.set_color(self.nodes.band, vmath.vector4(0, 0, 0, 0))

	gui.set_color(self.nodes.street_shadow, vmath.vector4(0, 0, 0, 0))
	gui.set_color(self.nodes.band_shadow, vmath.vector4(0, 0, 0, 0))
	gui.set_color(self.nodes.fighter_shadow, vmath.vector4(0, 0, 0, 0))
end

local function do_fighter_anim(self)
	self.fight_anim = timer.delay(6, true, function(self) 
		gui.play_flipbook(self.nodes.fighter, "fighter_anim")

		if self.state == self.SPLASH then
			self.state = self.SPLASH_DONE
		end
	end)
end

local function do_splash(self)
	self.state  = self.SPLASH
	
	gui.animate(self.nodes.street, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_LINEAR, C.select.fade_in_time, 3)
	gui.animate(self.nodes.band, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_LINEAR, C.select.fade_in_time, 3.75)

	gui.set_color(self.nodes.bruce_clarence, vmath.vector4(0, 0, 0, 0))
	gui.animate(self.nodes.bruce_clarence, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_LINEAR, 4, 0.5)
	gui.animate(self.nodes.bruce_clarence, "position.y", 234, gui.EASING_OUTCUBIC, C.select.fade_in_time_bruceclarence * 2, 0.5)

	gui.animate(self.nodes.fighter, "position.y", 570, gui.EASING_OUTBOUNCE, 0.3, 5.5)
	gui.animate(self.nodes.street, "position.x", 225, gui.EASING_OUTCUBIC, 0.25, 5.65)
	gui.animate(self.nodes.band, "position.x", 815, gui.EASING_OUTCUBIC, 0.25, 5.65)
	gui.animate(self.nodes.band, "position.y", 590, gui.EASING_OUTCUBIC, 0.25, 5.65)

	timer.delay(5.7, false, function(self) add_shake(0.2,8,8,0.02) end)
	do_fighter_anim(self)
end

local function do_menu(self)
	print("do_menu")
	self.state = self.SELECT
	gui.animate(self.nodes.bruce_clarence, "position.y", -245, gui.EASING_OUTCUBIC, C.select.fade_in_time_bruceclarence / 2)

	local street_shadow_pos = gui.get_position(self.nodes.street)
	local band_shadow_pos = gui.get_position(self.nodes.band)
	local fighter_shadow_pos = gui.get_position(self.nodes.fighter)

	gui.set_position(self.nodes.street_shadow, street_shadow_pos)
	gui.set_position(self.nodes.band_shadow, band_shadow_pos)
	gui.set_position(self.nodes.fighter_shadow, fighter_shadow_pos)
	
	gui.set_color(self.nodes.street_shadow, vmath.vector4(0, 0, 0, 1))
	gui.set_color(self.nodes.band_shadow, vmath.vector4(0, 0, 0, 1))
	gui.set_color(self.nodes.fighter_shadow, vmath.vector4(0, 0, 0, 1))

	gui.animate(self.nodes.portraits, "position.y", 405, gui.EASING_OUTCUBIC, C.select.fade_in_time_bruceclarence / 2, 0, function(self)
		gui.animate(self.nodes.street_shadow, "position.x", street_shadow_pos.x - 10, gui.EASING_OUTCUBIC, 0.5, 0.5)
		gui.animate(self.nodes.street_shadow, "position.y", street_shadow_pos.y - 10, gui.EASING_OUTCUBIC, 0.5, 0.5)
		gui.animate(self.nodes.band_shadow, "position.x", band_shadow_pos.x - 10, gui.EASING_OUTCUBIC, 0.5, 1.5)
		gui.animate(self.nodes.band_shadow, "position.y", band_shadow_pos.y - 10, gui.EASING_OUTCUBIC, 0.5, 1.5)
		gui.animate(self.nodes.fighter_shadow, "position.x", fighter_shadow_pos.x - 10, gui.EASING_OUTCUBIC, 0.5, 1)
		gui.animate(self.nodes.fighter_shadow, "position.y", fighter_shadow_pos.y - 10, gui.EASING_OUTCUBIC, 0.5, 1)
	end)

	gui.set_color(self.nodes.portrait_bruce, vmath.vector4(0,0,0,1))
	gui.set_color(self.nodes.portrait_clarence, vmath.vector4(0,0,0,1))
	gui.set_color(self.nodes.portrait_paul, vmath.vector4(0,0,0,1))

	
	self.join_color_timer = timer.delay(0.5, true, function(self) 
		local color = gui.get_color(self.nodes.join)
		if color.w > 0.5 then
			color.w = 0.5
		else
			color.w = 1
		end
		gui.set_color(self.nodes.join, color)
	end)
end

local function hide_splash(self, cb)
	print("hide_splash")

	timer.cancel(self.fight_anim)
	timer.cancel(self.join_color_timer)
	
	local done = 0
	
	for k, v in pairs(self.nodes) do
		done = done + 1

		local color = gui.get_color(v)
		color.w = 0
		
		gui.animate(v, gui.PROP_COLOR, color, gui.EASING_OUTCUBIC, 1.5, 0, function(self) 
			done = done - 1
			if done == 0 then
				cb(self)
			end
		end)
	end
end

local function show_splash(self)

	msg.post("@render:", "set_is_game", {value=false})
	
	local done = 0

	for k, v in pairs(self.nodes) do
		done = done + 1

		local color = gui.get_color(v)
		color.w = 1

		gui.animate(v, gui.PROP_COLOR, color, gui.EASING_OUTCUBIC, 1.5)
	end

	do_fighter_anim(self)
end

function init(self)
	self.nodes = {}
	self.nodes.street         = gui.get_node("street")
	self.nodes.street_shadow  = gui.get_node("street_shadow")
	self.nodes.band           = gui.get_node("band")
	self.nodes.band_shadow    = gui.get_node("band_shadow")
	self.nodes.bruce_clarence = gui.get_node("bruceclarence")
	self.nodes.fighter        = gui.get_node("fighter")
	self.nodes.fighter_shadow = gui.get_node("fighter_shadow")
	self.nodes.portraits      = gui.get_node("portrait_container")
	self.nodes.join           = gui.get_node("join_text")

	self.nodes.portrait_bruce    = gui.get_node("portrait_bruce")
	self.nodes.portrait_clarence = gui.get_node("portrait_clarence")
	self.nodes.portrait_paul     = gui.get_node("portrait_paul")

	init_gui(self)
	
	self.players = {}
	self.input_to_player_id = {}

	self.NULL        = 0
	self.SPLASH      = 1
	self.SPLASH_DONE = 2
	self.SELECT      = 3
	self.GAME        = 4

	self.state = self.NULL

	timer.delay(2, false, function() 
		do_splash(self)
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == C.game.reset then
		msg.post("main#script", C.game.unload)
		show_splash(self)
		do_menu(self)
	end
end

function on_input(self, action_id, action)
	local input_table  = C.input_table_from_action(action_id, action)
	local input_action = input_table.action_id
	
	if input_action == C.player.input_jump and action.pressed then
		if self.state == self.SPLASH_DONE then
			do_menu(self)
		elseif self.state == self.NULL then
			do_splash(self)
		elseif self.state == self.SELECT then

			local player_id = #self.players + 1
			
			if self.input_to_player_id[input_table.id] then

				if #self.players >= 1 then
					hide_splash(self, function(self)
						start_game(self)
					end)
				else
					print("Not enough players!")
				end
			else
				self.input_to_player_id[input_table.id] = player_id
				new_player(self, C.player.TYPE_HUMAN, player_id, input_table.type, input_table.id)
			end
		end
	end
end
